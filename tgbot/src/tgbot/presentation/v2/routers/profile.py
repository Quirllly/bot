from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery  # –ò–º–ø–æ—Ä—Ç Message –¥–æ–±–∞–≤–ª–µ–Ω
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dishka.integrations.aiogram import FromDishka, inject
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from tgbot.application import UserGateway,PromoGateway
from tgbot.presentation.v2.keyboards import get_profile_keyboard,get_faq_keyboard
from tgbot.presentation.v2.subscribe_check import check_with_answer
from tgbot.application.postgres.models import Promocode, PromocodeType,UserPromocode
from sqlalchemy import select
profile_router = Router()


@profile_router.callback_query(F.data == "profile")
@inject
async def profile(
    callback: CallbackQuery, session: FromDishka[AsyncSession], bot: Bot
):
    if not await check_with_answer(
        bot=bot,
        message=callback.message,
        user_tg_id=callback.from_user.id,
        session=session,
    ):
        return

    user_gateway = UserGateway(session)
    user = await user_gateway.by_tg_id(callback.from_user.id)
    print(callback.from_user)
    await callback.message.delete()
    await callback.message.answer_animation(
        animation="CgACAgIAAxkBAAIKV2fGRe1ERmBAmZMD_FMSj9rpNLTkAAJ6agACprThSXQUewG4dhmzNgQ", 
        caption=f"""
                    <b>‚ú® –ü—Ä–æ—Ñ–∏–ª—å</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<b>üë§ –ò–º—è: {callback.from_user.first_name}</b>
<b>üÜî ID: {callback.from_user.id}</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {user.amount_of_referrals}
‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {user.amount_of_referrals}
üí∞ –ë–∞–ª–∞–Ω—Å {user.balance}

‚ÅâÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?
<blockquote>–ü–æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ +1‚≠êÔ∏è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.</blockquote>

‚¨áÔ∏è <i> –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.</i>
                    """,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
    )


@profile_router.callback_query(F.data == "daily")
@inject
async def daily_bonus(
    callback: CallbackQuery, 
    session: FromDishka[AsyncSession], 
    bot: Bot
):
    user_gateway = UserGateway(session)
    user = await user_gateway.by_tg_id(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if user.last_daily_bonus and (datetime.now() - user.last_daily_bonus) < timedelta(hours=24):
        await callback.answer("‚ùå –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞!", show_alert=True)
        return
    
    referral_link = f"https://t.me/{(await bot.get_me()).username}?start={user.referral_code}"
    chat = await bot.get_chat(callback.from_user.id)
    user_bio  = chat.bio if chat.bio else "–ë–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    print(f"User Info: {chat}")
    if referral_link in user_bio: 
        user.balance += 1
        user.last_daily_bonus = datetime.now()
        await session.commit()
        await callback.answer("‚úÖ–¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 1‚≠êÔ∏è", show_alert=True)
    else:
        await callback.answer(
            f"‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            show_alert=True,
            parse_mode="HTML"
        )

class PromoCodeState(StatesGroup):
    waiting_for_promo = State()

@profile_router.callback_query(F.data == "promo")
@inject
async def enter_promo_code(
    callback: CallbackQuery,
    session: FromDishka[AsyncSession],
    bot: Bot,
    state: FSMContext
):
    if not await check_with_answer(
        bot=bot,
        message=callback.message,
        user_tg_id=callback.from_user.id,
        session=session,
    ):
        return

    user_gateway = UserGateway(session)
    promocode_gateway = PromoGateway(session)
    user = await user_gateway.by_tg_id(callback.from_user.id)

    await callback.message.delete()
    await callback.message.answer_animation(
        animation="CgACAgIAAxkBAAIKV2fGRe1ERmBAmZMD_FMSj9rpNLTkAAJ6agACprThSXQUewG4dhmzNgQ",
        caption="‚ú® <i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:</i>\n"
        "<i>–ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –≤ <a href='https://t.me/patrickstarsfarm'>–∫–∞–Ω–∞–ª–µ</a> –∏ <a href='https://t.me/patrickstarschat'>—á–∞—Ç–µ</a></i>",
        reply_markup=get_faq_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(PromoCodeState.waiting_for_promo)

class PromoCodeState(StatesGroup):
    waiting_for_promo = State()

@profile_router.message(PromoCodeState.waiting_for_promo)
@inject
async def process_promo_code(
    message: Message,
    state: FSMContext,
    session: FromDishka[AsyncSession],
    bot: Bot,
):
    if not await check_with_answer(
        bot=bot,
        message=message,
        user_tg_id=message.from_user.id,
        session=session,
    ):
        return

    user_gateway = UserGateway(session)
    promo_gateway = PromoGateway(session)
    user = await user_gateway.by_tg_id(message.from_user.id)
    promo_code = message.text.strip()
    
    promocode = await promo_gateway.get_valid_promo(promo_code)
    if not promocode:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", show_alert=True)
        await state.clear()
        return

    if await promo_gateway.is_promo_used(user.id, promocode.id):
        await message.answer("üö´ –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª(–∞) —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥", show_alert=True)
        await state.clear()
        return

    if not await promo_gateway.can_use_promo(user, promocode):
        await message.answer(
            f"üìõ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {promocode.required_referrals} –¥—Ä—É–≥–∞", show_alert=True
        )
        await state.clear()
        return

    try:
        await promo_gateway.activate_promo(user, promocode)
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {promocode.reward} –∑–≤–µ–∑–¥‚≠êÔ∏è\n",
            show_alert=True,
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
