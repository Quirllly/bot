# presentation/v2/admin.py
# presentation/v2/admin.py
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dishka.integrations.aiogram import FromDishka, inject
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import UUID
from tgbot.application.postgres.models import (
    Admins, Promocode, PromocodeType, 
    WithdrawalRequest, User, Task, TaskType
)
from tgbot.application import UserGateway, WithdrawGateway, TaskGateway
from sqlalchemy import select
from aiogram.methods import SendGift
from aiogram.methods import GetAvailableGifts

admin_router = Router()


class TaskCreationStates(StatesGroup):
    CHOOSE_TYPE = State()
    ENTER_SUBSCRIPTION = State()
    ENTER_INVITE = State()
    ENTER_BOT_START = State()


class WithdrawStates(StatesGroup):
    VIEWING_REQUESTS = State()
class PromoCreationStates(StatesGroup):
    CHOOSE_TYPE = State()
    ENTER_SIMPLE = State()
    ENTER_REFERRAL = State()
class TaskDeletionStates(StatesGroup):
    CHOOSING_TASK = State()
    CONFIRM_DELETION = State()
def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo"),
         InlineKeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="delete_task"),
         InlineKeyboardButton(text="üì§ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥", callback_data="withdraw_requests")]
    ])

@admin_router.callback_query(F.data == "create_task")
async def create_task_start(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="task_type_subscription")],  # –ë—ã–ª–æ: task_type_subscription
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="task_type_invite_link")],  # –ë—ã–ª–æ: task_type_invite_link
        [InlineKeyboardButton(text="ü§ñ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞", callback_data="task_type_bot_start")],  # –ë—ã–ª–æ: task_type_bot_start

        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboard
    )
    await state.set_state(TaskCreationStates.CHOOSE_TYPE)


@admin_router.callback_query(F.data.startswith("task_type_"))
async def process_task_type(callback: CallbackQuery, state: FSMContext):
    task_type = callback.data.split("_")[2]
    await state.update_data(task_type=task_type)
    
    text = ""
    if task_type == "subscription":
        text = (
            "üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|ID –∫–∞–Ω–∞–ª–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ü–æ–¥–ø–∏—Å–∫–∞|–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª|50.0|@my_channel</code>"
        )
    elif task_type == "invite":
        text = (
            "üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|ID —á–∞—Ç–∞|–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ|–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π|100.0|-10012345|https://t.me/+invite_link</code>"
        )
    elif task_type == "bot":
        text = (
            "üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–°—Å—ã–ª–∫—É|–¢–æ–∫–µ–Ω –±–æ—Ç–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ë–æ—Ç|–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞|150.0|MyBot|123456:ABC-DEF1234ghIkl</code>"
        )
    
    await callback.message.edit_text(text, parse_mode="HTML")

    state_mapping = {
        "subscription": TaskCreationStates.ENTER_SUBSCRIPTION,
        "invite": TaskCreationStates.ENTER_INVITE,
        "bot": TaskCreationStates.ENTER_BOT_START
    }
    await state.set_state(state_mapping[task_type])

@admin_router.message(TaskCreationStates.ENTER_SUBSCRIPTION)
@inject
async def process_subscription_task(
    message: Message, 
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    try:
        parts = message.text.split("|")
        if len(parts) != 5:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                 "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–°—Å—ã–ª–∫—É|ID –∫–∞–Ω–∞–ª–∞</code>", parse_mode="HTML")
            return

        task = Task(
            type=TaskType.SUBSCRIPTION,
            title=parts[0].strip(),
            description=parts[1].strip(),
            reward=float(parts[2].strip()),
            channel_id=parts[3].strip(),
            invite_link=parts[3].strip(),
            chat_id=parts[4].strip(),
            giphy_url="https://example.com/default.gif"
        )

        session.add(task)
        await session.commit()
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '–ü–æ–¥–ø–∏—Å–∫–∞' —Å–æ–∑–¥–∞–Ω–∞: {task.title}!")
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@admin_router.callback_query(F.data == "delete_task")
@inject
async def delete_task_start(
    callback: CallbackQuery,
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    task_gateway = TaskGateway(session)
    tasks = await task_gateway.get_all_tasks()
    
    if not tasks:
        await callback.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        *[
            [InlineKeyboardButton(
                text=f"üóë {task.title} ({task.type})",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º value –¥–ª—è enum
                callback_data=f"task_delete_{task.id}"
            )] for task in tasks
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(TaskDeletionStates.CHOOSING_TASK)

@admin_router.callback_query(F.data.startswith("task_delete_"))
@inject
async def confirm_task_deletion(
    callback: CallbackQuery,
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    task_id = int(callback.data.split("_")[2])
    task = await TaskGateway(session).get_task_by_id(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    await state.update_data(task_id=task_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_deletion")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_deletion")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"–¢–∏–ø: {task.type}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠êÔ∏è",
        reply_markup=keyboard
    )
    await state.set_state(TaskDeletionStates.CONFIRM_DELETION)

@admin_router.callback_query(F.data == "confirm_deletion")
@inject
async def process_task_deletion(
    callback: CallbackQuery,
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    data = await state.get_data()
    task_id = data.get("task_id")
    
    if not task_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task = await TaskGateway(session).get_task_by_id(task_id)
    if task:
        await session.delete(task)
        await session.commit()
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    await state.clear()
    await back_to_admin_panel(callback)

@admin_router.callback_query(F.data == "cancel_deletion")
async def cancel_task_deletion(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
        reply_markup=get_admin_keyboard()
    )

@admin_router.message(TaskCreationStates.ENTER_INVITE)
@inject
async def process_invite_task(
    message: Message, 
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    try:
        parts = message.text.split("|")
        if len(parts) != 5:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                 "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–ü–æ—Ä—è–¥–æ–∫|ID —á–∞—Ç–∞|–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</code>", parse_mode="HTML")
            return

        task = Task(
            type=TaskType.INVITE_LINK,
            title=parts[0].strip(),
            description=parts[1].strip(),
            reward=float(parts[2].strip()),
            chat_id=parts[3].strip(),
            invite_link=parts[4].strip(),
            giphy_url="https://example.com/default.gif"
        )

        session.add(task)
        await session.commit()
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' —Å–æ–∑–¥–∞–Ω–∞: {task.title}!")
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@admin_router.message(TaskCreationStates.ENTER_BOT_START)
@inject
async def process_bot_task(
    message: Message, 
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    try:
        parts = message.text.split("|")
        if len(parts) != 5:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                 "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–ü–æ—Ä—è–¥–æ–∫|–Æ–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞|–¢–æ–∫–µ–Ω –±–æ—Ç–∞</code>", parse_mode="HTML")
            return

        task = Task(
            type=TaskType.BOT_START,
            title=parts[0].strip(),
            description=parts[1].strip(),
            reward=float(parts[2].strip()),
            bot_username=parts[3].strip(),
            bot_token=parts[4].strip(),
            giphy_url="https://example.com/default.gif"
        )

        session.add(task)
        await session.commit()
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '–°—Ç–∞—Ä—Ç –±–æ—Ç–∞' —Å–æ–∑–¥–∞–Ω–∞: {task.title}!")
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@admin_router.callback_query(F.data == "withdraw_requests")
@inject
async def show_withdraw_requests(
    callback: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    session: FromDishka[AsyncSession],
):
    withdraw_gateway = WithdrawGateway(session)
    requests = await withdraw_gateway.get_all_pending()
    if not requests:
        await callback.answer("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥!")
        return

    await state.update_data(
        request_ids=[str(req.id) for req in requests],
        current_index=0
    )
    await state.set_state(WithdrawStates.VIEWING_REQUESTS)
    await show_current_request(callback.message, state, withdraw_gateway)

async def show_current_request(
    message: Message, 
    state: FSMContext,
    withdraw_gateway: WithdrawGateway
):
    data = await state.get_data()
    request_ids = data['request_ids']
    current_index = data['current_index']
    
    try:
        request = await withdraw_gateway.get_request_by_id(UUID(request_ids[current_index]))
        user = await withdraw_gateway.get_user_by_request(request)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return

    emoji_mapping = {
        '15_1': 'üß∏', '15_2': 'üíù',
        '25_1': 'üåπ', '25_2': 'üéÅ',
        '50_1': 'üçæ', '50_2': 'üíê',
        '50_3': 'üöÄ', '50_4': 'üéÇ',
        '100_1': 'üèÜ', '100_2': 'üíç',
        '100_3': 'üíé', 'premium': 'üëë'
    }

    text = (
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ No: {request.id}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else '–Ω–µ—Ç'} | ID: {user.tg_id}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.amount} {emoji_mapping.get(request.gift_type, 'üéÅ')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {request.status.capitalize()}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"withdraw_approve_{request.id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                callback_data=f"withdraw_reject_{request.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", 
                url=f"tg://user?id={user.tg_id}"
            )
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data="withdraw_prev"),
            InlineKeyboardButton(text="–°–ª–µ–¥ ‚û°Ô∏è", callback_data="withdraw_next")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
        ]
    ])

    await message.edit_text(text, reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("withdraw_"))
@inject
async def handle_withdraw_actions(
    callback: CallbackQuery,
    state: FSMContext,
    session: FromDishka[AsyncSession],
    bot: Bot,
):
    action = callback.data.split("_")[1]
    user_gateway = UserGateway(session)
    withdraw_gateway = WithdrawGateway(session)
    
    if action in ["prev", "next"]:
        data = await state.get_data()
        current_index = data['current_index']
        
        if action == "prev" and current_index > 0:
            current_index -= 1
        elif action == "next" and current_index < len(data['request_ids']) - 1:
            current_index += 1
            
        await state.update_data(current_index=current_index)
        await show_current_request(callback.message, state, withdraw_gateway)
        return

    if action in ["approve", "reject"]:
        request_id = UUID(callback.data.split("_")[2])
        request = await withdraw_gateway.get_request_by_id(request_id)
        user = await user_gateway.by_id(request.user_id)

        if action == "approve":
            request.status = "approved"
            await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Aiogram (–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ)
            await bot.send_message(
                user.tg_id, 
                f"üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount}‚≠êÔ∏è –æ–¥–æ–±—Ä–µ–Ω!"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ Telethon
            
            await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!")
        else:
            request.status = "rejected"
            user.balance += request.amount
            await session.commit()
            
            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Aiogram
            await bot.send_message(
                user.tg_id, 
                f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {request.amount}‚≠êÔ∏è"
            )
            
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

        await show_current_request(callback.message, state, withdraw_gateway)


@admin_router.message(F.text == "/admin")
@inject
async def admin_panel(
    message: Message,
    session: FromDishka[AsyncSession],
    bot: Bot
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    is_admin = await session.scalar(
        select(Admins).where(Admins.user_id == message.from_user.id)
    )
    
    if not is_admin:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await message.answer(
        "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@admin_router.callback_query(F.data == "admin_back")
async def back_to_admin_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@admin_router.callback_query(F.data == "create_promo")
async def create_promo_start(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ü—Ä–æ—Å—Ç–æ–π", callback_data="promo_type_simple")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π", callback_data="promo_type_referral")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=keyboard
    )
    await state.set_state(PromoCreationStates.CHOOSE_TYPE)

@admin_router.callback_query(F.data.startswith("promo_type_"))
async def process_promo_type(callback: CallbackQuery, state: FSMContext):
    promo_type = callback.data.split("_")[2]
    await state.update_data(promo_type=promo_type.lower())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    if promo_type == "simple":
        text = ("üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–õ–∏–º–∏—Ç|–°—Ä–æ–∫ (—á–∞—Å–æ–≤)</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>SUMMER2024|50|100|24</code>")
    else:
        text = ("üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–≥—Ä–∞–¥–∞|–õ–∏–º–∏—Ç|–°—Ä–æ–∫ (—á–∞—Å–æ–≤)|–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>REFBONUS|100|50|24|5</code>")
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(
        PromoCreationStates.ENTER_SIMPLE if promo_type == "simple" 
        else PromoCreationStates.ENTER_REFERRAL
    )

@admin_router.message(PromoCreationStates.ENTER_SIMPLE)
@inject
async def process_simple_promo(
    message: Message, 
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        name, reward, limit, hours = message.text.split("|")
        promocode = Promocode(
            name=name.strip(),
            type=PromocodeType.simple,
            reward=float(reward.strip()),
            remaining_usages=int(limit.strip()),
            expires_at=datetime.utcnow() + timedelta(hours=int(hours.strip())),
            required_referrals=0
        )
        session.add(promocode)
        await session.commit()
        
        await message.answer("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",reply_markup=keyboard)
        await state.clear()

@admin_router.message(PromoCreationStates.ENTER_REFERRAL)
@inject
async def process_referral_promo(
    message: Message, 
    state: FSMContext,
    session: FromDishka[AsyncSession]
):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        name, reward, limit, hours, req_refs = message.text.split("|")
        promocode = Promocode(
            name=name.strip(),
            type=PromocodeType.referral_based,
            reward=float(reward.strip()),
            remaining_usages=int(limit.strip()),
            expires_at=datetime.utcnow() + timedelta(hours=int(hours.strip())),
            required_referrals=int(req_refs.strip())
        )
        session.add(promocode)
        await session.commit()
        
        await message.answer("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",reply_markup=keyboard)
        await state.clear()