from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from dishka.integrations.aiogram import FromDishka, inject

from tgbot.application import UserGateway,WithdrawGateway
from tgbot.presentation.v2.keyboards import (
    get_withdraw_keyboard,
)
from tgbot.presentation.v2.subscribe_check import check_with_answer

withdraw_router = Router()


@withdraw_router.callback_query(F.data == "change_stars")
@inject
async def get_daily_bonus1(
    callback: CallbackQuery, session: FromDishka[AsyncSession], bot: Bot
):
    if not await check_with_answer(
        bot=bot,
        message=callback.message,
        user_tg_id=callback.from_user.id,
        session=session,
    ):
        return
    user_gateway = UserGateway(session)
    user = await user_gateway.by_tg_id(callback.from_user.id)
    await callback.message.delete()
    await callback.message.answer_animation(
        animation="CgACAgIAAxkBAAIKFmfGOqVBMesgMlxEJmG8mpD4TkoCAAKgbAACprThScsBSslQA5k5NgQ", 
        caption=f'<b>üí∞–ë–∞–ª–∞–Ω—Å: </b>{user.balance}‚≠êÔ∏è\n'
                "<b>‚ÄºÔ∏è–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:</b>\n"
                f'‚Äî –º–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞\n'
                "‚Äî –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n\n"
                "<b>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å:</b>",
        reply_markup=get_withdraw_keyboard(),
        parse_mode="HTML",
    )


@withdraw_router.callback_query(F.data.startswith("gift_"))
@inject
async def handle_gift_selection(
    callback: CallbackQuery,
    session: FromDishka[AsyncSession],
    bot: Bot
):
    if not await check_with_answer(
        bot=bot,
        message=callback.message,
        user_tg_id=callback.from_user.id,
        session=session,
    ):
        return

    try:
        user_gateway = UserGateway(session)
        withdraw_gateway = WithdrawGateway(session)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_gateway.by_tg_id(callback.from_user.id)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = callback.data
        if data == "gift_premium":
            amount = 1700.0
            gift_type = "premium"
        else:
            _, amount_part, gift_num = data.split('_')
            amount = float(amount_part)
            gift_type = f"{amount_part}_{gift_num}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        if user.balance < amount:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
            return

        if user.amount_of_referrals < 5:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π!")
            return

        if await withdraw_gateway.has_pending_requests(user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞

        await withdraw_gateway.create_request(
                user_id=user.id,
                amount=amount,
                gift_type=gift_type
            )
        user.balance -= amount
        await session.commit()

        await callback.answer(
            "üéâ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            show_alert=True
        )
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        print(e)
        await session.rollback()
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")