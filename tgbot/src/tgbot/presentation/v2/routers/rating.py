from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from dishka.integrations.aiogram import FromDishka, inject

from tgbot.presentation.v2.keyboards import (
    get_faq_keyboard,
)
from tgbot.presentation.v2.subscribe_check import check_with_answer
from tgbot.application import UserGateway

rating_router = Router()
import logging

logger = logging.getLogger(__name__)
@rating_router.callback_query(F.data == "rating")
@inject
async def get_top(
    callback: CallbackQuery, session: FromDishka[AsyncSession], bot: Bot
):
    try:
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback 'rating'")

        if not await check_with_answer(
            bot=bot,
            message=callback.message,
            user_tg_id=callback.from_user.id,
            session=session,
        ):
            logger.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ check_with_answer –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return

        user_gateway = UserGateway(session)
        logger.info("–°–æ–∑–¥–∞–Ω UserGateway")

        top_3 = await user_gateway.top_referrals_last_day(3)
        logger.info(f"–¢–æ–ø-3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: {top_3}")

        current_user = await user_gateway.by_tg_id(callback.from_user.id)
        logger.info(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")

        current_user_position = await user_gateway.get_user_position(callback.from_user.id)
        logger.info(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user_position}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–ø-3
        top_text = "<b>üèÜ –¢–æ–ø 3 –∑–∞ –¥–µ–Ω—å:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (user, referral_count) in enumerate(top_3):
            top_text += f"{medals[i]} {user.username} | –î—Ä—É–∑–µ–π: {referral_count}\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –±–æ–Ω—É—Å–∞–º–∏
        bonus_text = (
            "\n<b>–ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 3 –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è:</b>\n"
            "<blockquote>- 1–æ–µ –º–µ—Å—Ç–æ + 100‚≠êÔ∏è\n"
            "- 2–æ–µ –º–µ—Å—Ç–æ + 50‚≠êÔ∏è\n"
            "- 3–µ –º–µ—Å—Ç–æ + 25‚≠êÔ∏è</blockquote>"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_position_text = f"<b>‚ú®–°–µ–π—á–∞—Å —Ç—ã –Ω–∞: {current_user_position} –º–µ—Å—Ç–µ | –î—Ä—É–∑–µ–π: {current_user.amount_of_referrals}</b>"

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"{top_text}\n{bonus_text}\n{user_position_text}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π
        await callback.message.delete()
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

        await callback.message.answer_animation(
            animation="CgACAgIAAxkBAAIKJ2fGPqee-ZC3An71F8vRV671eT-MAALxcAAC5yvBSRCUSyNXqFePNgQ",
            caption=message_text,
            reply_markup=get_faq_keyboard(),
            parse_mode="HTML",
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_top: {e}", exc_info=True)