from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from dishka.integrations.aiogram import FromDishka, inject
from aiogram.types import (
        InlineKeyboardButton,
        InlineKeyboardMarkup,
    )
from tgbot.presentation.v2.keyboards import (
    get_main_keyboard,
    get_subscribe_task_keyboard,
    TaskCallback,
)
from tgbot.presentation.v2.subscribe_check import (
    check_with_answer,
    check_subscription,
)
from uuid import UUID
from tgbot.application import UserGateway, TaskGateway, UserTaskGateway
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ChatJoinRequest
from aiogram.fsm.context import FSMContext
from dishka.integrations.aiogram import FromDishka, inject
from tgbot.application.postgres.models  import Task, User, UserTaskData
from tgbot.application.postgres.services import TaskChecker

tasks_router = Router()

@tasks_router.chat_join_request()
@inject
async def handle_invite(
    request: ChatJoinRequest,
    session: FromDishka[AsyncSession],
):
    user_gateway = UserGateway(session)
    user = await user_gateway.by_tg_id(request.from_user.id)
    user_data = await session.get(UserTaskData, user.id) or UserTaskData(user_id=user.id)
    user_data.used_invites.setdefault(str(request.chat.id), []).append(request.invite_link.invite_link)
    await session.commit()

@tasks_router.message(F.text == "/start")
@inject
async def handle_bot_start(
    message: Message,
    session: FromDishka[AsyncSession],

):
    user_gateway = UserGateway(session)
    user = await user_gateway.by_tg_id(message.from_user.id)
    user_data = await session.get(UserTaskData, user.id) or UserTaskData(user_id=user.id)
    bot_username = (await message.bot.get_me()).username
    if bot_username not in user_data.started_bots:
        user_data.started_bots.append(bot_username)
        await session.commit()

@tasks_router.callback_query(F.data.startswith("task1_"))
@inject
async def handle_task(
    callback: CallbackQuery,
    session: FromDishka[AsyncSession],
    bot: Bot,
):
    print(callback.data)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        task_type = callback.data.split("_", 1)[1]
        task_type = {
            "subscription": "subscription",
            "invite_link": "invite_link",
            "bot_start": "bot_start"
        }.get(task_type, None)

        if task_type is None:
            print(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π task_type {callback.data}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        print(f"–¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")

    except (IndexError, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback.data: {e}, –¥–∞–Ω–Ω—ã–µ: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏.")
        return

    # –†–∞–±–æ—Ç–∞ —Å –ë–î
    user_gateway = UserGateway(session)
    task_gateway = TaskGateway(session)

    try:
        user = await user_gateway.by_tg_id(callback.from_user.id)

        # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ç–∏–ø—É
        task = await task_gateway.get_task_by_type(task_type)

        if not task:
            await callback.answer(f"‚ùå –ó–∞–¥–∞—á–∞ {task_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await callback.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task.title}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.")

@tasks_router.callback_query(F.data == "tasks")
@inject
async def show_tasks(
    callback: CallbackQuery,
    session: FromDishka[AsyncSession]
):
    task_gateway = TaskGateway(session)
    user_gateway = UserGateway(session)
    
    user = await user_gateway.by_tg_id(callback.from_user.id)
    task = await task_gateway.get_next_task(user.id)

    if not task:
        await callback.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", show_alert=True)
        return

    await callback.message.delete()
    await callback.message.answer(
        format_task_message(task),
        reply_markup=get_subscribe_task_keyboard(task)
    )

@tasks_router.callback_query(TaskCallback.filter())
@inject
async def check_task_completion(
    callback: CallbackQuery,
    callback_data: TaskCallback,
    session: FromDishka[AsyncSession],
    bot: Bot,
):
    task_gateway = TaskGateway(session)
    user_gateway = UserGateway(session)
    task_checker = TaskChecker(bot, session)

    try:
        user = await user_gateway.by_tg_id(callback.from_user.id)
        task = await task_gateway.get_task_by_id(callback_data.tg_id)
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user.tg_id, "–Ω–∞ –∫–∞–Ω–∞–ª", task.channel_id)
        
        if not user or not task:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user.tg_id, "–Ω–∞ –∫–∞–Ω–∞–ª", task.channel_id)
        is_completed = await task_checker.verify(user.tg_id, task)
        print("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user.tg_id, "–Ω–∞ –∫–∞–Ω–∞–ª", task.channel_id, "–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:", is_completed)
        
        if is_completed:
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            await task_gateway.mark_task_completed(user.id, task.id)
            print("–ó–∞–¥–∞—á–∞", task.id, "–ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            user.balance += task.reward
            await session.commit()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
            next_task = await task_gateway.get_next_task(user.id)
            print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É", next_task)
            
            if next_task:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π
                await callback.message.answer(
                    text=format_task_message(next_task),
                    reply_markup=get_subscribe_task_keyboard(next_task)
                )
                await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.")
            else:
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await callback.message.answer(
                    "üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="main_menu"
                            )]
                        ]
                    )
                )
                await callback.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")

    except Exception as e:
        print(f"Error checking task: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è")

def format_task_message(task: Task) -> str:
    return (
        f"‚ú® –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! ‚ú®\n\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ({task.type})\n\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠êÔ∏è\n\n"
        "üìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ù–ï –æ—Ç–ø–∏—Å—ã–≤–∞–π—Å—è "
        "–æ—Ç –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π"
    )