"""Tasks

Revision ID: eba0ff7354ff
Revises: 97d9c4a813c3
Create Date: 2025-03-08 00:41:20.372750

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eba0ff7354ff'
down_revision: Union[str, None] = '97d9c4a813c3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_task_data',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('used_invites', sa.JSON(), nullable=True),
    sa.Column('started_bots', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.add_column('tasks', sa.Column('type', postgresql.ENUM('subscription', 'invite_link', 'bot_start', name='tasktype'), nullable=False))
    op.add_column('tasks', sa.Column('order', sa.Integer(), nullable=False))
    op.add_column('tasks', sa.Column('title', sa.String(length=100), nullable=True))
    op.add_column('tasks', sa.Column('channel_id', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('invite_link', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('chat_id', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('bot_username', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('bot_token', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('giphy_url', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('tasks', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('tasks_link_key', 'tasks', type_='unique')
    op.drop_constraint('tasks_tg_id_key', 'tasks', type_='unique')
    op.create_unique_constraint(None, 'tasks', ['order'])
    op.drop_column('tasks', 'link')
    op.drop_column('tasks', 'tg_id')
    op.alter_column('user_task', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('user_task', 'task_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint('user_task_user_id_fkey', 'user_task', type_='foreignkey')
    op.drop_constraint('user_task_task_id_fkey', 'user_task', type_='foreignkey')
    op.create_foreign_key(None, 'user_task', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_task', 'tasks', ['task_id'], ['id'])
    op.add_column('withdrawl_requests', sa.Column('dd', sa.String(length=50), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('withdrawl_requests', 'dd')
    op.drop_constraint(None, 'user_task', type_='foreignkey')
    op.drop_constraint(None, 'user_task', type_='foreignkey')
    op.create_foreign_key('user_task_task_id_fkey', 'user_task', 'tasks', ['task_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('user_task_user_id_fkey', 'user_task', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('user_task', 'task_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_task', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.add_column('tasks', sa.Column('tg_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tasks', type_='unique')
    op.create_unique_constraint('tasks_tg_id_key', 'tasks', ['tg_id'])
    op.create_unique_constraint('tasks_link_key', 'tasks', ['link'])
    op.alter_column('tasks', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('tasks', 'created_at')
    op.drop_column('tasks', 'giphy_url')
    op.drop_column('tasks', 'bot_token')
    op.drop_column('tasks', 'bot_username')
    op.drop_column('tasks', 'chat_id')
    op.drop_column('tasks', 'invite_link')
    op.drop_column('tasks', 'channel_id')
    op.drop_column('tasks', 'title')
    op.drop_column('tasks', 'order')
    op.drop_column('tasks', 'type')
    op.drop_table('user_task_data')
    # ### end Alembic commands ###
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Создаем тип ENUM вручную перед использованием
    op.execute("CREATE TYPE tasktype AS ENUM ('subscription', 'invite_link', 'bot_start')")
    
    op.create_table('user_task_data',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('used_invites', sa.JSON(), nullable=True),
    sa.Column('started_bots', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    
    # Теперь добавляем колонку с типом tasktype
    op.add_column('tasks', sa.Column('type', postgresql.ENUM('subscription', 'invite_link', 'bot_start', name='tasktype', create_type=False), nullable=False))
    
    # ... остальные команды

def downgrade() -> None:
    # ... существующие команды
    
    # Удаляем тип ENUM в самом конце
    op.execute("DROP TYPE tasktype")